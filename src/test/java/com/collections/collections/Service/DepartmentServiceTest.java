package com.collections.collections.Service;import com.collections.collections.Employee;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import java.util.ArrayList;import java.util.Collection;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.mockito.Mockito.mock;import static org.mockito.Mockito.when;public class DepartmentServiceTest {    private DepartmentServiceInterface departmentService;    @BeforeEach    public void setUp() {        EmployeeServiceInterface employeeService = mock(EmployeeService.class);        when(employeeService.listAllEmployees()).thenReturn(listAllEmployees());        departmentService = new DepartmentService(employeeService);    }    private List<Employee> listAllEmployees(){        return List.of(new Employee("Ivan", "Ivanov", 200000, 1),                new Employee("Sergey", "Sergeev", 100000, 2),                new Employee("Petr", "Petrov", 150000, 1),                new Employee("Aleksey", "Alekseev", 90000, 2));    }    @Test    public void findEmployeeMaxSalaryTest(){        Employee employee = departmentService.findEmployeeMaxSalary(1);        assertEquals("Ivan", employee.getFirstName());        assertEquals("Ivanov", employee.getLastName());        assertEquals(200000, employee.getSalary());        assertEquals(1, employee.getDepartmentId());    }    @Test    public void findEmployeeMinSalaryTest(){        Employee employee = departmentService.findEmployeeMinSalary(1);        assertEquals("Petr", employee.getFirstName());        assertEquals("Petrov", employee.getLastName());        assertEquals(150000, employee.getSalary());        assertEquals(1, employee.getDepartmentId());    }    @Test    public void listAllEmployeesInDepartmentTest(){        Collection<Employee> listAllEmployeesInDepartment = departmentService.listAllEmployeesInDepartment(1);        Collection<Employee> listAllEmployeesInDepartmentTrue = new ArrayList<>();        listAllEmployeesInDepartmentTrue.add(new Employee("Ivan", "Ivanov", 200000, 1));        listAllEmployeesInDepartmentTrue.add(new Employee("Petr", "Petrov", 150000, 1));        assertEquals(listAllEmployeesInDepartmentTrue, listAllEmployeesInDepartment);    }}